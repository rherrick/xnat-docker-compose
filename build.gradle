import com.avast.gradle.dockercompose.tasks.ComposeBuild
import groovy.json.JsonSlurper
import java.nio.file.Paths
import java.util.regex.Matcher
import javax.inject.Inject

plugins {
    id "com.avast.gradle.docker-compose" version "0.17.12"
    id "io.spring.dependency-management" version "1.1.7"
}

group "org.nrg.xnat.containers"
version "1.8.6.1"

repositories {
    mavenLocal()
    mavenCentral()
    maven { url "https://nrgxnat.jfrog.io/nrgxnat/libs-release" }
    maven { url "https://nrgxnat.jfrog.io/nrgxnat/libs-snapshot" }
}

def static copyEnv(source = "default.env") {
    def file = new File(source)
    if (file.exists()) {
        new File(".env").withWriter { writer ->
            file.eachLine { line ->
                if (!(line ==~ /^\s*$/)) {
                    def (name, value) = line.tokenize("=")
                    writer.println "${name.trim()}=${value != null ? value.trim() : ""}"
                }
            }
        }
    }
}

def static verifyManifest(source) {
    new File(source).exists() ? source : "default-manifest.json"
}
    
copyEnv(hasProperty("envFile") ? property("envFile") : "default.env")

def manifest = file(verifyManifest(hasProperty("manifest") ? property("manifest") : "manifest.json"))
def json = new JsonSlurper().parse(manifest)

def baseDestination = "${json.base ? (json.base.startsWith(".") ? json.base : "./" + json.base) : "."}"
def destination = { path -> Paths.get(baseDestination, path).toString() }

class CopyConfiguration extends Copy {
    @Inject
    CopyConfiguration(def name, def destination, def references) {
        project.configurations.create(name) {
            transitive = false
        }

        from project.configurations.getByName(name)
        into destination

        references.each {
            Matcher matcher = it =~ /^([^ >]+)\s*->\s*([^ >]+)$/
            if (matcher.matches()) {
                def reference = matcher[0][1]
                def atoms = reference.split ':'
                project.dependencies.add name, reference
                rename "${atoms[1]}-${atoms[2]}\\.[^.]+\$", matcher[0][2]
            } else {
                project.dependencies.add name, it
            }
        }
    }
}

dependencyManagement.imports {
    mavenBom "org.nrg:parent:${project.version}"
}

json.findAll { !(it.key ==~ /^(base|version)$/) }.each { key, value ->
    String taskName = "copy${key.capitalize()}"
    String configName = "download${key.capitalize()}"
    def references = value instanceof List ? value : [value]
    tasks.create taskName, CopyConfiguration, configName, destination(key), references
}

task copyAll {
    dependsOn tasks.matching { Task task -> task instanceof CopyConfiguration }
}

tasks.withType(ComposeBuild).configureEach { composeBuild ->
    composeBuild.dependsOn copyAll
}

dockerCompose {
    useComposeFiles = ["docker-compose.yml"]
    startedServices = ["xnat-traefik", "xnat-web", "xnat-db"]
    removeImages = com.avast.gradle.dockercompose.RemoveImages.All
    tcpPortsToIgnoreWhenWaiting = [8104, 8144]

    // Build full stack with fullStackComposeBuild, launch full stack with fullStackComposeUp.
    fullStack {
        useComposeFiles = ["docker-compose.yml", "activemq/docker-compose.yml", "orthanc/docker-compose.yml", "smtp/docker-compose.yml"]
        startedServices = ["xnat-traefik", "xnat-web", "xnat-db", "xnat-activemq", "xnat-pacs", "xnat-smtp"]
    }
}

defaultTasks "composeUp"
